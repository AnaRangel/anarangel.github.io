---
import type { HTMLAttributes } from 'astro/types';
import { IconCatalog, Icons, IconSize, IconStyle } from './Icons';

const IconStyles: Record<IconStyle, number> = {
  [IconStyle.thin]: 1,
  [IconStyle.light]: 1.2,
  [IconStyle.regular]: 1.5,
  [IconStyle.bold]: 1.8,
  [IconStyle.solid]: 0,
};

const IconSizes: Record<IconSize, string> = {
  [IconSize.xs]: '0.4rem',
  [IconSize.sm]: '0.6rem',
  [IconSize.base]: '0.8rem',
  [IconSize.lg]: '1.0rem',
  [IconSize.xl]: '1.2rem',
  [IconSize['2xl']]: '1.4rem',
  [IconSize['3xl']]: '1.6rem',
  [IconSize['4xl']]: '1.8rem',
  [IconSize['5xl']]: '2.0rem',
  [IconSize['6xl']]: '2.2rem',
  [IconSize['7xl']]: '2.4rem',
  [IconSize['8xl']]: '2.6rem',
  [IconSize['9xl']]: '2.8rem',
};

interface Props extends HTMLAttributes<'svg'> {
  /**
   * The color variant of the icon.
   */
  color?: string;

  /**
   * Additional CSS classes to be applied to the SVG element.
   */
  classes?: string;

  /**
   * The icon to display.
   */
  icon?: IconCatalog;

  /**
   * The style of the icon.
   */
  iconStyle?: IconStyle;

  /**
   * Whether to apply hover effects to the icon.
   */
  hover?: boolean;

  /**
   * The size of the icon. Required.
   */
  size: IconSize;
}

const {
  classes,
  color,
  hover,
  icon = IconCatalog.arrowDownTray,
  iconStyle = IconStyle.thin,
  size = IconSize.sm,
} = Astro.props;

const strokeWidth = IconStyles[iconStyle];
const iconPaths = Icons[icon];
const iconPath = iconStyle === IconStyle.solid ? iconPaths.solid : iconPaths.outline;
const sizes = IconSizes[size];
const fill = iconStyle === IconStyle.solid ? `currentColor` : 'none';
const stroke = iconStyle === IconStyle.solid ? 'none' : `currentColor`;

const fillHover = hover === true && iconStyle === IconStyle.solid ? `currentColor` : `none`;
const strokeHover = hover === true && iconStyle === IconStyle.solid ? `none` : `currentColor`;
---

<svg
  class:list={[classes, { hover: hover }]}
  data-testid="Icon"
  viewBox="0 0 24 24"
  xmlns="http://www.w3.org/2000/svg"
  stroke-width={strokeWidth}
  focusable="false"
  aria-hidden="true"
>
  <path
    fill-rule="evenodd"
    clip-rule="evenodd"
    stroke-linecap="round"
    stroke-linejoin="round"
    d={iconPath}></path>
</svg>

<style
  define:vars={{
    fill,
    stroke,
    sizes,
    'fill-hover': fillHover,
    'stroke-hover': strokeHover,
    color,
  }}
>
  svg {
    color: var(--color, hsl(0deg 0% 100%));

    transition-timing-function: var(--ease-in-3);
    transition-duration: 200ms;
    transition-property: fill stroke;
    inline-size: var(--sizes);
    block-size: var(--sizes);
  }

  path {
    fill: var(--fill);
    stroke: var(--stroke);
  }

  .hover:hover {
    fill: var(--fill-hover);
    stroke: var(--stroke-hover);
  }
</style>
