---
import { ButtonSize, ButtonVariant, HtmlType, type ColorVariants } from '@common';
import { Icon, IconCatalog, IconSize, IconStyle } from '@components';

interface Props {
  /**
   * Changes the size of the button, giving it more or less padding
   */
  size?: ButtonSize;

  /**
   * Adds additional class to the button
   */
  className?: string;

  /**
   * The shape of the component. It determines the importance in the hierarchy, for example, the contained button commands the most attention
   */
  variant?: ButtonVariant;

  /**
   * If set to true, the button's color will be inverted.
   */
  invert?: boolean;

  /**
   * Disables the button, disallowing user interaction.
   */
  isDisabled?: boolean;

  /**
   * Extends the button to 100% width.
   */
  isFullWidth?: boolean;

  /**
   * HTML type attribute of the button.
   */
  htmlType?: HtmlType;

  /**
   * Icon before the button content
   */
  beforeIcon?: IconCatalog;

  /**
   * Icon after the button content
   */
  afterIcon?: IconCatalog;

  // TODO: Look for a better way to pass the color
  /**
   * Color of the icon
   */
  iconColor?: `var(--${ColorVariants}-${string})`;
}

const {
  size = ButtonSize.base,
  variant = ButtonVariant.primary,
  invert,
  isDisabled,
  isFullWidth = false,
  htmlType,
  className,
  beforeIcon,
  afterIcon,
  iconColor = '',
} = Astro.props;

const iconSizeMap = {
  [ButtonSize.xs]: IconSize.lg,
  [ButtonSize.sm]: IconSize.xl,
  [ButtonSize.base]: IconSize['2xl'],
  [ButtonSize.lg]: IconSize['3xl'],
};

const computedIconSize = iconSizeMap[size];
---

<button
  type={htmlType}
  disabled={isDisabled}
  data-size={size}
  data-variant={variant}
  class:list={['button', { inverted: invert }, { fullWidth: isFullWidth }, className]}
>
  {
    beforeIcon && (
      <Icon
        icon={beforeIcon}
        size={computedIconSize}
        color={iconColor}
        iconStyle={IconStyle.bold}
      />
    )
  }

  <slot />

  {
    afterIcon && (
      <Icon icon={afterIcon} size={computedIconSize} color={iconColor} iconStyle={IconStyle.bold} />
    )
  }
</button>

<style lang="scss">
  :root {
    --color-ghost: transparent;
    --text-color: hsl(0deg 0% 100%);
    --gradient-primary: var(--color-secondary-500), var(--color-primary-500),
      var(--color-primary-500), var(--color-secondary-500);
    --font-weight: 500;
  }

  // TODO: Make this a utility Class
  .fullWidth {
    inline-size: 100%;
  }

  .button {
    position: relative;
    z-index: 1;
    inline-size: fit-content;

    padding: var(--padding);
    border: none;
    border-radius: 2.25rem;
    overflow: hidden;

    color: var(--text-color);
    font-weight: var(--font-weight);
    font-size: var(--font-size);
    font-family: InterVariable, Inter, sans-serif;

    background-color: var(--background-color);

    /* stylelint-disable-next-line plugin/no-low-performance-animation-properties */
    transition: font-weight 500ms var(--ease-spring-3);
    block-size: var(--height);

    &:has(svg) {
      display: flex;
      gap: 0.625rem;
      align-items: center;
    }

    &:active {
      --font-weight: 800;
    }

    &::before {
      position: absolute;

      z-index: -1;

      background-image: linear-gradient(to right, var(--gradient-primary));

      transition: transform 0.3s var(--ease-in-out-3);

      content: '';
      will-change: transform;
      inset: 0;
      inline-size: 200%;
    }

    &:hover::before {
      transform: translateX(-50%);
    }
  }

  .button.inverted {
    color: hsl(0deg 0% 100%);
    padding-block: 0.9rem;

    background: transparent;

    &::before {
      position: absolute;

      padding: 0.125rem;
      border-radius: 3.125rem;

      background-image: linear-gradient(to right, var(--gradient-primary));
      background-size: 200% 200%;

      /* stylelint-disable-next-line plugin/no-low-performance-animation-properties */
      transition: background-position 500ms var(--ease-in-out-3);

      content: '';

      inline-size: 100%;
      inset: 0;
      mask:
        linear-gradient(hsl(0deg 0% 100%) 0 0) content-box,
        linear-gradient(hsl(0deg 0% 100%) 0 0);

      mask-composite: exclude;
    }

    &:hover::before {
      background-position: 100% center;
      transform: translateX(0%);
    }
  }

  .button[data-variant='primary'] {
    --gradient-primary: var(--color-secondary-500), var(--color-primary-400),
      var(--color-primary-600), var(--color-secondary-600);
    --text-color: #000;
  }

  .button[data-variant='secondary'] {
    --gradient-primary: hsl(228deg 100% 59%), hsl(263deg 100% 66%);
  }

  .button[data-variant='ghost'] {
    --gradient-primary: hsl(0deg 0% 14%), hsl(0deg 0% 12%), hsl(0deg 0% 12%), hsl(0deg 0% 14%);
  }

  .button:disabled {
    cursor: not-allowed;
    opacity: 0.4;

    &:hover::before {
      background-position: initial;
      transform: translateX(0%);
    }

    &:active {
      font-weight: var(--font-weight);
    }
  }

  /* Size styles */
  .button[data-size='xs'] {
    --padding: 0.375rem 1rem;
    --font-size: calc(var(--size-1) + var(--size-2));
    --height: 2rem;

    &:has(svg) {
      --padding: 0.375rem 0.75rem;
    }
  }

  .button[data-size='sm'] {
    --padding: 0.5rem 1.5rem;
    --font-size: var(--size-3);
    --height: 2.2rem;

    &:has(svg) {
      --padding: 0.5rem 1.275rem;
    }
  }

  .button[data-size='base'] {
    --padding: 1.125rem 2.5rem;
    --font-size: var(--size-3);

    &:has(svg) {
      --padding: 0.75rem 2rem;
    }
  }

  .button[data-size='lg'] {
    --padding: 0.75rem 3.75rem;
    --font-size: 1.25rem;
    --height: 3rem;

    &:has(svg) {
      --padding: 0.75rem 3rem;
    }
  }
</style>
